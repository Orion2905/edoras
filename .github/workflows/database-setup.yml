name: Database Setup and Migration

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      run_migrations:
        description: 'Run database migrations'
        required: true
        default: true
        type: boolean
      init_roles:
        description: 'Initialize default roles and permissions'
        required: true
        default: false
        type: boolean

env:
  AZURE_CONTAINER_REGISTRY: edorasregistry2025
  CONTAINER_NAME: edoras-backend-api
  RESOURCE_GROUP: rg-edoras-2025

jobs:
  database-setup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Run Database Migrations
      if: ${{ github.event.inputs.run_migrations == 'true' }}
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FLASK_APP: app.py
        FLASK_ENV: ${{ github.event.inputs.environment }}
      run: |
        cd backend
        echo "üîÑ Running database migrations..."
        flask db upgrade
        echo "‚úÖ Database migrations completed"

    - name: Initialize Roles and Permissions
      if: ${{ github.event.inputs.init_roles == 'true' }}
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FLASK_APP: app.py
        FLASK_ENV: ${{ github.event.inputs.environment }}
      run: |
        cd backend
        echo "üîÑ Initializing default roles and permissions..."
        python init_roles_permissions.py
        echo "‚úÖ Roles and permissions initialized"

    - name: Database Health Check
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        FLASK_APP: app.py
        FLASK_ENV: ${{ github.event.inputs.environment }}
      run: |
        cd backend
        echo "üîç Running database health check..."
        python -c "
        from src.app import create_app
        from src.app.extensions import db
        from src.app.models.user import User
        from src.app.models.role import Role
        from src.app.models.company import Company
        
        app = create_app()
        with app.app_context():
            # Test database connection
            result = db.session.execute(db.text('SELECT 1')).scalar()
            print(f'‚úÖ Database connection: OK (result: {result})')
            
            # Check tables exist
            users_count = User.query.count()
            roles_count = Role.query.count()
            companies_count = Company.query.count()
            
            print(f'üìä Database status:')
            print(f'   - Users: {users_count}')
            print(f'   - Roles: {roles_count}')
            print(f'   - Companies: {companies_count}')
            print('‚úÖ Database health check completed')
        "
        echo "‚úÖ Database health check completed"
